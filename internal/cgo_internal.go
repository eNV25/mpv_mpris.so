// WARNING: This file has automatically been generated
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package internal

/*
#include "mpv.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// client_api_version function as declared in mpv/client.h:253
func client_api_version() uint32 {
	__ret := C.mpv_client_api_version()
	__v := (uint32)(__ret)
	return __v
}

// error_string function as declared in mpv/client.h:377
func error_string(error int32) string {
	cerror, cerrorAllocMap := (C.int)(error), cgoAllocsUnknown
	__ret := C.mpv_error_string(cerror)
	runtime.KeepAlive(cerrorAllocMap)
	__v := packPCharString(__ret)
	return __v
}

// free function as declared in mpv/client.h:386
func free(data unsafe.Pointer) {
	cdata, cdataAllocMap := data, cgoAllocsUnknown
	C.mpv_free(cdata)
	runtime.KeepAlive(cdataAllocMap)
}

// client_name function as declared in mpv/client.h:395
func client_name(ctx *handle) string {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.mpv_client_name(cctx)
	runtime.KeepAlive(cctxAllocMap)
	__v := packPCharString(__ret)
	return __v
}

// client_id function as declared in mpv/client.h:412
func client_id(ctx *handle) int32 {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.mpv_client_id(cctx)
	runtime.KeepAlive(cctxAllocMap)
	__v := (int32)(__ret)
	return __v
}

// create function as declared in mpv/client.h:468
func create() *handle {
	__ret := C.mpv_create()
	__v := *(**handle)(unsafe.Pointer(&__ret))
	return __v
}

// initialize function as declared in mpv/client.h:490
func initialize(ctx *handle) int32 {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.mpv_initialize(cctx)
	runtime.KeepAlive(cctxAllocMap)
	__v := (int32)(__ret)
	return __v
}

// destroy function as declared in mpv/client.h:502
func destroy(ctx *handle) {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.mpv_destroy(cctx)
	runtime.KeepAlive(cctxAllocMap)
}

// detach_destroy function as declared in mpv/client.h:521
func detach_destroy(ctx *handle) {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.mpv_detach_destroy(cctx)
	runtime.KeepAlive(cctxAllocMap)
}

// terminate_destroy function as declared in mpv/client.h:549
func terminate_destroy(ctx *handle) {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.mpv_terminate_destroy(cctx)
	runtime.KeepAlive(cctxAllocMap)
}

// create_client function as declared in mpv/client.h:575
func create_client(ctx *handle, name string) *handle {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cname, cnameAllocMap := unpackPCharString(name)
	__ret := C.mpv_create_client(cctx, cname)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(**handle)(unsafe.Pointer(&__ret))
	return __v
}

// create_weak_client function as declared in mpv/client.h:589
func create_weak_client(ctx *handle, name string) *handle {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cname, cnameAllocMap := unpackPCharString(name)
	__ret := C.mpv_create_weak_client(cctx, cname)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(**handle)(unsafe.Pointer(&__ret))
	return __v
}

// load_config_file function as declared in mpv/client.h:609
func load_config_file(ctx *handle, filename string) int32 {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfilename, cfilenameAllocMap := unpackPCharString(filename)
	__ret := C.mpv_load_config_file(cctx, cfilename)
	runtime.KeepAlive(cfilenameAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (int32)(__ret)
	return __v
}

// suspend function as declared in mpv/client.h:639
func suspend(ctx *handle) {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.mpv_suspend(cctx)
	runtime.KeepAlive(cctxAllocMap)
}

// resume function as declared in mpv/client.h:644
func resume(ctx *handle) {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.mpv_resume(cctx)
	runtime.KeepAlive(cctxAllocMap)
}

// get_time_us function as declared in mpv/client.h:662
func get_time_us(ctx *handle) int32 {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.mpv_get_time_us(cctx)
	runtime.KeepAlive(cctxAllocMap)
	__v := (int32)(__ret)
	return __v
}

// free_node_contents function as declared in mpv/client.h:896
func free_node_contents(node *node) {
	cnode, cnodeAllocMap := (*C.mpv_node)(unsafe.Pointer(node)), cgoAllocsUnknown
	C.mpv_free_node_contents(cnode)
	runtime.KeepAlive(cnodeAllocMap)
}

// set_option function as declared in mpv/client.h:939
func set_option(ctx *handle, name string, format format, data unsafe.Pointer) int32 {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cname, cnameAllocMap := unpackPCharString(name)
	cformat, cformatAllocMap := (C.mpv_format)(format), cgoAllocsUnknown
	cdata, cdataAllocMap := data, cgoAllocsUnknown
	__ret := C.mpv_set_option(cctx, cname, cformat, cdata)
	runtime.KeepAlive(cdataAllocMap)
	runtime.KeepAlive(cformatAllocMap)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (int32)(__ret)
	return __v
}

// set_option_string function as declared in mpv/client.h:948
func set_option_string(ctx *handle, name string, data string) int32 {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cname, cnameAllocMap := unpackPCharString(name)
	cdata, cdataAllocMap := unpackPCharString(data)
	__ret := C.mpv_set_option_string(cctx, cname, cdata)
	runtime.KeepAlive(cdataAllocMap)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (int32)(__ret)
	return __v
}

// command function as declared in mpv/client.h:964
func command(ctx *handle, args []string) int32 {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cargs, cargsAllocMap := unpackArgSString(args)
	__ret := C.mpv_command(cctx, cargs)
	packSString(args, cargs)
	runtime.KeepAlive(cargsAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (int32)(__ret)
	return __v
}

// command_node function as declared in mpv/client.h:1000
func command_node(ctx *handle, args []node, result *node) int32 {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cargs, cargsAllocMap := copyPNodeBytes((*sliceHeader)(unsafe.Pointer(&args)))
	cresult, cresultAllocMap := (*C.mpv_node)(unsafe.Pointer(result)), cgoAllocsUnknown
	__ret := C.mpv_command_node(cctx, cargs, cresult)
	runtime.KeepAlive(cresultAllocMap)
	runtime.KeepAlive(cargsAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (int32)(__ret)
	return __v
}

// command_ret function as declared in mpv/client.h:1016
func command_ret(ctx *handle, args []string, result *node) int32 {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cargs, cargsAllocMap := unpackArgSString(args)
	cresult, cresultAllocMap := (*C.mpv_node)(unsafe.Pointer(result)), cgoAllocsUnknown
	__ret := C.mpv_command_ret(cctx, cargs, cresult)
	runtime.KeepAlive(cresultAllocMap)
	packSString(args, cargs)
	runtime.KeepAlive(cargsAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (int32)(__ret)
	return __v
}

// command_string function as declared in mpv/client.h:1025
func command_string(ctx *handle, args string) int32 {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cargs, cargsAllocMap := unpackPCharString(args)
	__ret := C.mpv_command_string(cctx, cargs)
	runtime.KeepAlive(cargsAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (int32)(__ret)
	return __v
}

// command_async function as declared in mpv/client.h:1047
func command_async(ctx *handle, reply_userdata uint32, args []string) int32 {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	creply_userdata, creply_userdataAllocMap := (C.uint64_t)(reply_userdata), cgoAllocsUnknown
	cargs, cargsAllocMap := unpackArgSString(args)
	__ret := C.mpv_command_async(cctx, creply_userdata, cargs)
	packSString(args, cargs)
	runtime.KeepAlive(cargsAllocMap)
	runtime.KeepAlive(creply_userdataAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (int32)(__ret)
	return __v
}

// command_node_async function as declared in mpv/client.h:1064
func command_node_async(ctx *handle, reply_userdata uint32, args []node) int32 {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	creply_userdata, creply_userdataAllocMap := (C.uint64_t)(reply_userdata), cgoAllocsUnknown
	cargs, cargsAllocMap := copyPNodeBytes((*sliceHeader)(unsafe.Pointer(&args)))
	__ret := C.mpv_command_node_async(cctx, creply_userdata, cargs)
	runtime.KeepAlive(cargsAllocMap)
	runtime.KeepAlive(creply_userdataAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (int32)(__ret)
	return __v
}

// abort_async_command function as declared in mpv/client.h:1097
func abort_async_command(ctx *handle, reply_userdata uint32) {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	creply_userdata, creply_userdataAllocMap := (C.uint64_t)(reply_userdata), cgoAllocsUnknown
	C.mpv_abort_async_command(cctx, creply_userdata)
	runtime.KeepAlive(creply_userdataAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// set_property function as declared in mpv/client.h:1130
func set_property(ctx *handle, name string, format format, data unsafe.Pointer) int32 {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cname, cnameAllocMap := unpackPCharString(name)
	cformat, cformatAllocMap := (C.mpv_format)(format), cgoAllocsUnknown
	cdata, cdataAllocMap := data, cgoAllocsUnknown
	__ret := C.mpv_set_property(cctx, cname, cformat, cdata)
	runtime.KeepAlive(cdataAllocMap)
	runtime.KeepAlive(cformatAllocMap)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (int32)(__ret)
	return __v
}

// set_property_string function as declared in mpv/client.h:1138
func set_property_string(ctx *handle, name string, data string) int32 {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cname, cnameAllocMap := unpackPCharString(name)
	cdata, cdataAllocMap := unpackPCharString(data)
	__ret := C.mpv_set_property_string(cctx, cname, cdata)
	runtime.KeepAlive(cdataAllocMap)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (int32)(__ret)
	return __v
}

// set_property_async function as declared in mpv/client.h:1155
func set_property_async(ctx *handle, reply_userdata uint32, name string, format format, data unsafe.Pointer) int32 {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	creply_userdata, creply_userdataAllocMap := (C.uint64_t)(reply_userdata), cgoAllocsUnknown
	cname, cnameAllocMap := unpackPCharString(name)
	cformat, cformatAllocMap := (C.mpv_format)(format), cgoAllocsUnknown
	cdata, cdataAllocMap := data, cgoAllocsUnknown
	__ret := C.mpv_set_property_async(cctx, creply_userdata, cname, cformat, cdata)
	runtime.KeepAlive(cdataAllocMap)
	runtime.KeepAlive(cformatAllocMap)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(creply_userdataAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (int32)(__ret)
	return __v
}

// get_property function as declared in mpv/client.h:1176
func get_property(ctx *handle, name string, format format, data unsafe.Pointer) int32 {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cname, cnameAllocMap := unpackPCharString(name)
	cformat, cformatAllocMap := (C.mpv_format)(format), cgoAllocsUnknown
	cdata, cdataAllocMap := data, cgoAllocsUnknown
	__ret := C.mpv_get_property(cctx, cname, cformat, cdata)
	runtime.KeepAlive(cdataAllocMap)
	runtime.KeepAlive(cformatAllocMap)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (int32)(__ret)
	return __v
}

// get_property_string function as declared in mpv/client.h:1192
func get_property_string(ctx *handle, name string) *byte {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cname, cnameAllocMap := unpackPCharString(name)
	__ret := C.mpv_get_property_string(cctx, cname)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// get_property_osd_string function as declared in mpv/client.h:1201
func get_property_osd_string(ctx *handle, name string) *byte {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cname, cnameAllocMap := unpackPCharString(name)
	__ret := C.mpv_get_property_osd_string(cctx, cname)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// get_property_async function as declared in mpv/client.h:1215
func get_property_async(ctx *handle, reply_userdata uint32, name string, format format) int32 {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	creply_userdata, creply_userdataAllocMap := (C.uint64_t)(reply_userdata), cgoAllocsUnknown
	cname, cnameAllocMap := unpackPCharString(name)
	cformat, cformatAllocMap := (C.mpv_format)(format), cgoAllocsUnknown
	__ret := C.mpv_get_property_async(cctx, creply_userdata, cname, cformat)
	runtime.KeepAlive(cformatAllocMap)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(creply_userdataAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (int32)(__ret)
	return __v
}

// observe_property function as declared in mpv/client.h:1273
func observe_property(mpv *handle, reply_userdata uint32, name string, format format) int32 {
	cmpv, cmpvAllocMap := (*C.mpv_handle)(unsafe.Pointer(mpv)), cgoAllocsUnknown
	creply_userdata, creply_userdataAllocMap := (C.uint64_t)(reply_userdata), cgoAllocsUnknown
	cname, cnameAllocMap := unpackPCharString(name)
	cformat, cformatAllocMap := (C.mpv_format)(format), cgoAllocsUnknown
	__ret := C.mpv_observe_property(cmpv, creply_userdata, cname, cformat)
	runtime.KeepAlive(cformatAllocMap)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(creply_userdataAllocMap)
	runtime.KeepAlive(cmpvAllocMap)
	__v := (int32)(__ret)
	return __v
}

// unobserve_property function as declared in mpv/client.h:1286
func unobserve_property(mpv *handle, registered_reply_userdata uint32) int32 {
	cmpv, cmpvAllocMap := (*C.mpv_handle)(unsafe.Pointer(mpv)), cgoAllocsUnknown
	cregistered_reply_userdata, cregistered_reply_userdataAllocMap := (C.uint64_t)(registered_reply_userdata), cgoAllocsUnknown
	__ret := C.mpv_unobserve_property(cmpv, cregistered_reply_userdata)
	runtime.KeepAlive(cregistered_reply_userdataAllocMap)
	runtime.KeepAlive(cmpvAllocMap)
	__v := (int32)(__ret)
	return __v
}

// event_name function as declared in mpv/client.h:1512
func event_name(event event_id) string {
	cevent, ceventAllocMap := (C.mpv_event_id)(event), cgoAllocsUnknown
	__ret := C.mpv_event_name(cevent)
	runtime.KeepAlive(ceventAllocMap)
	__v := packPCharString(__ret)
	return __v
}

// event_to_node function as declared in mpv/client.h:1785
func event_to_node(dst *node, src *event) int32 {
	cdst, cdstAllocMap := (*C.mpv_node)(unsafe.Pointer(dst)), cgoAllocsUnknown
	csrc, csrcAllocMap := (*C.mpv_event)(unsafe.Pointer(src)), cgoAllocsUnknown
	__ret := C.mpv_event_to_node(cdst, csrc)
	runtime.KeepAlive(csrcAllocMap)
	runtime.KeepAlive(cdstAllocMap)
	__v := (int32)(__ret)
	return __v
}

// request_event function as declared in mpv/client.h:1801
func request_event(ctx *handle, event event_id, enable int32) int32 {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cevent, ceventAllocMap := (C.mpv_event_id)(event), cgoAllocsUnknown
	cenable, cenableAllocMap := (C.int)(enable), cgoAllocsUnknown
	__ret := C.mpv_request_event(cctx, cevent, cenable)
	runtime.KeepAlive(cenableAllocMap)
	runtime.KeepAlive(ceventAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (int32)(__ret)
	return __v
}

// request_log_messages function as declared in mpv/client.h:1817
func request_log_messages(ctx *handle, min_level string) int32 {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cmin_level, cmin_levelAllocMap := unpackPCharString(min_level)
	__ret := C.mpv_request_log_messages(cctx, cmin_level)
	runtime.KeepAlive(cmin_levelAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (int32)(__ret)
	return __v
}

// wait_event function as declared in mpv/client.h:1850
func wait_event(ctx *handle, timeout float64) *event {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ctimeout, ctimeoutAllocMap := (C.double)(timeout), cgoAllocsUnknown
	__ret := C.mpv_wait_event(cctx, ctimeout)
	runtime.KeepAlive(ctimeoutAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(**event)(unsafe.Pointer(&__ret))
	return __v
}

// wakeup function as declared in mpv/client.h:1865
func wakeup(ctx *handle) {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.mpv_wakeup(cctx)
	runtime.KeepAlive(cctxAllocMap)
}

// wait_async_requests function as declared in mpv/client.h:1917
func wait_async_requests(ctx *handle) {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.mpv_wait_async_requests(cctx)
	runtime.KeepAlive(cctxAllocMap)
}

// hook_add function as declared in mpv/client.h:1954
func hook_add(ctx *handle, reply_userdata uint32, name string, priority int32) int32 {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	creply_userdata, creply_userdataAllocMap := (C.uint64_t)(reply_userdata), cgoAllocsUnknown
	cname, cnameAllocMap := unpackPCharString(name)
	cpriority, cpriorityAllocMap := (C.int)(priority), cgoAllocsUnknown
	__ret := C.mpv_hook_add(cctx, creply_userdata, cname, cpriority)
	runtime.KeepAlive(cpriorityAllocMap)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(creply_userdataAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (int32)(__ret)
	return __v
}

// hook_continue function as declared in mpv/client.h:1973
func hook_continue(ctx *handle, id uint32) int32 {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cid, cidAllocMap := (C.uint64_t)(id), cgoAllocsUnknown
	__ret := C.mpv_hook_continue(cctx, cid)
	runtime.KeepAlive(cidAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (int32)(__ret)
	return __v
}

// get_wakeup_pipe function as declared in mpv/client.h:2035
func get_wakeup_pipe(ctx *handle) int32 {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.mpv_get_wakeup_pipe(cctx)
	runtime.KeepAlive(cctxAllocMap)
	__v := (int32)(__ret)
	return __v
}

// get_sub_api function as declared in mpv/client.h:2059
func get_sub_api(ctx *handle, sub_api sub_api) unsafe.Pointer {
	cctx, cctxAllocMap := (*C.mpv_handle)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	csub_api, csub_apiAllocMap := (C.mpv_sub_api)(sub_api), cgoAllocsUnknown
	__ret := C.mpv_get_sub_api(cctx, csub_api)
	runtime.KeepAlive(csub_apiAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}
